Структуры корзины заказов
    У нас есть набор действий, которые мы хотим осуществлять с заказами:
        calculateTotalSum(){/*...*/ }
        getItems(){/*...*/ }
        getItemsCount(){/*...*/ }
        addItem($item){/*...*/ }
        deleteItem($item){/*...*/ }
        printOrder(){/*...*/ }
        showOrder(){/*...*/ }
        load(){/*...*/ }
        save(){/*...*/ }
        update(){/*...*/ }
        delete(){/*...*/ }
    Нужно создать структуру классов, чтобы можно было пользоваться этими методами.

1) У каждого действия будет свой сервис по типу
    GetOrderProductsCount::class
    GetOrderTotalSum::class
    и тд.

Для действий:
            calculateTotalSum(){/*...*/ }
            getItems(){/*...*/ }
            getItemsCount(){/*...*/ }
            addItem($item){/*...*/ }
            deleteItem($item){/*...*/ }
У нас есть сущность Order::class(реализована для примера)
Она может формироваться через репозиторий OrdersRepository::class, который вызывает класс фабрики которая создает сущность по полученным данным из БД.
Работаем через нее. В случае когда мы добавляем/удаляем товары заказа, мы сохраняем сущность через метод репозитория OrdersRepository::save().

С остальными действиями примерно такая же схема. Получаем сущность Order и работаем с ней.

На примере showOrder().
    В контроллере GetOrderController получаем request, валидируем его, создаем DTO например GetOrderCommand, которая хранит id заказа, который нас интересует и еще что угодно.
    Передаем GetOrderCommand в сервис GetOrderService. Где валидируем уже существование такого заказа. GetOrderService через репозиторий OrdersRepository получает сущность Order.
    И отдает в контроллер. В нем мы передаем полученную сущность в OrderTransformer, который формирует json ответ из сущности.